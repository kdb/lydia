<?php
/**
 * @file
 * Core Lydia features.
 */

/**
 * Implements hook_menu().
 */
function lydia_base_menu() {
  return array(
    // Top level "Lydia" container.
    'admin/lydia' => array(
      'title' => 'Lydia',
      'description' => 'Administration area for Lydia.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
      'weight' => -20,
    ),
    // Catches links marked for redirect and passes them on to be tracked.
    'sites/%/files/r/%/%' => array(
      'title' => 'Google Analytics redirect',
      'description' => 'Strips /r/ and redirects to the url while reporting to GA',
      'page callback' => 'lydia_base_track_n_redirect',
      'access callback' => TRUE,
    ),
  );
}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function lydia_base_embed_view($view_id, $display_id, $arguments = array()) {
  // Load the cart line item View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific line items for this order.
  $view->set_arguments($arguments);

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  // Return the rendered View.
  return $view->render();
}

/**
 * Menuhook callback - tracks the request via Google Analytics and redirects.
 *
 * Destination is determined by stripping out an "r/" from the path.
 */
function lydia_base_track_n_redirect() {
  // Strip /r/ from url - we know that it is there as we're called via
  // a menu hook.
  $url = $_GET['q'];
  $destination_url = lydia_base_strip_file_redirect($url);

  // Warn if we where unable to redirect.
  if ($destination_url == $url) {
    watchdog('lydia_base', 'Could not redirect user to %url', array("%url" => $url), WATCHDOG_ERROR);
    return (t('Could not redirect to file.'));
  }

  // Do the tracking and then redirect.
  lydia_base_ga_track($destination_url);
  drupal_goto($destination_url);
}

/**
 * Track a file-uri (public|private://<path>).
 *
 * If the path contains a redirect element (/r/) it will be stripped before
 * tracking.
 * The actual tracking is handled by lydia_base_ga_track().
 */
function lydia_base_ga_track_file_uri($file_uri) {
  if (empty($file_uri)) {
    return;
  }

  // Get the actual url to be tracked, in case the url is already stripped it
  // wont harm to strip twice.
  $url = lydia_base_strip_file_redirect(file_create_url($file_uri));
  if (empty($url)) {
    return;
  }

  // Get the relative path.
  $parsed = parse_url($url);
  if (empty($parsed['path'])) {
    return;
  }

  // We're ready to track.
  lydia_base_ga_track($parsed['path']);
}

/**
 * Track a url via Google Analytics.
 *
 * Tracking will only be performed if the google analytics module is enabled
 * and an account has been configured.
 */
function lydia_base_ga_track($destination_url) {
  if (!lydia_base_ga_enabled()) {
    return;
  }

  $pathinfo = pathinfo($destination_url);
  $filename = $pathinfo['basename'];

  // Initialize the tracker.
  require_once libraries_get_path('phpga') . '/src/autoload.php';

  $tracker = new UnitedPrototype\GoogleAnalytics\Tracker(variable_get('googleanalytics_account'), $_SERVER['HTTP_HOST']);

  // Assemble Visitor information.
  $visitor = new UnitedPrototype\GoogleAnalytics\Visitor();
  $visitor->setIpAddress(ip_address());
  $visitor->setUserAgent($_SERVER['HTTP_USER_AGENT']);

  // Assemble Session information.
  $session = new UnitedPrototype\GoogleAnalytics\Session();

  // Assemble Page information.
  $page = new UnitedPrototype\GoogleAnalytics\Page('/' . $destination_url);
  if (!empty($filename)) {
    $page->setTitle($filename);
  }

  // Track page view.
  $tracker->trackPageview($page, $session, $visitor);

}

/**
 * Injects a redirect marker into the specified filepath.
 *
 * Upon accessing the file the request will be tracked and the user redirected
 * to the original path.
 */
function lydia_base_inject_file_redirect($file_path) {
  if (!empty($file_path) && preg_match('#(^.*?)(lydia-channel.*)$#', $file_path, $matches)) {
    return $matches[1] . 'r/' . $matches[2];
  }
  else {
    return $file_path;
  }
}

/**
 * Strips the redirect marker from a file_path.
 */
function lydia_base_strip_file_redirect($file_path) {
  if (!empty($file_path) && preg_match('#(^.*?)r/(lydia-channel.*)$#', $file_path, $matches)) {
    return $matches[1] . $matches[2];
  } else {
    return $file_path;
  }
}

function lydia_base_file_url_alter(&$url){
  if (lydia_base_ga_enabled()) {
    $url = lydia_base_inject_file_redirect($url);
  }
}

/**
 * Checks if Google Analytics is configured and enabled.
 * @return bool
 */
function lydia_base_ga_enabled() {
  return (module_exists('googleanalytics') && variable_get('googleanalytics_account', FALSE) !== FALSE);
}

